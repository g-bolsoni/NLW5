{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _taggedTemplateLiteral from \"/home/giovane/Documentos/nlw5/www/podcastrnext/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/home/giovane/Documentos/nlw5/www/podcastrnext/src/contexts/PlayerContext.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  body{\\n      background-color: \", \"\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { createContext, useContext, useState } from \"react\";\nimport { createGlobalStyle } from 'styled-components';\nexport var PlayerContext = /*#__PURE__*/createContext({});\nexport function PlayerContextProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState([]),\n      episodeList = _useState[0],\n      setEpisodeList = _useState[1];\n\n  var _useState2 = useState(0),\n      currentEpisodeIndex = _useState2[0],\n      setCurrentEpisodeIndex = _useState2[1];\n\n  var _useState3 = useState(false),\n      isPlaying = _useState3[0],\n      setIsPlaying = _useState3[1];\n\n  var _useState4 = useState(false),\n      isLooping = _useState4[0],\n      setIsLooping = _useState4[1];\n\n  var _useState5 = useState(false),\n      isShuffling = _useState5[0],\n      setIsShuffling = _useState5[1]; //Darkmode\n\n\n  var _useState6 = useState('light'),\n      theme = _useState6[0],\n      setTheme = _useState6[1];\n  /*------------------------------------------------Play the episode ----------------------------------*/\n\n\n  function play(episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function playList(list, index) {\n    setEpisodeList(list);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function setIsPlayingState(state) {\n    setIsPlaying(state);\n  }\n  /*--------------------X----------------------------Play the episode ----------------X------------------*/\n\n  /*------------------------------------------------Next and ant episode ----------------------------------*/\n\n\n  var hasPrevious = currentEpisodeIndex > 0;\n  var hasNext = isShuffling || currentEpisodeIndex + 1 < episodeList.length;\n\n  function playNext() {\n    if (isShuffling) {\n      var nextRandomEpisodeIndex = Math.floor(Math.random() * episodeList.length);\n      setCurrentEpisodeIndex(nextRandomEpisodeIndex);\n    } else if (hasNext) {\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevious() {\n    {\n      hasPrevious && setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n  }\n  /*---------------------X---------------------------Next and ant episode ---------------X-------------------*/\n\n  /*------------------------------------------------Loop the episode ----------------------------------*/\n\n\n  function toggleLoop() {\n    setIsLooping(!isLooping);\n  }\n  /*-------------------------X-----------------------Loop the episode -----------------X-----------------*/\n\n  /*------------------------------------------------Shoffle the episodes ----------------------------------*/\n\n\n  function toggleShuffle() {\n    setIsShuffling(!isShuffling);\n  }\n\n  function clearPlayerState() {\n    setEpisodeList([]);\n    setCurrentEpisodeIndex(0);\n  }\n  /*-------------------------X-----------------------Shoffle the episodes -----------------X-----------------*/\n\n  /*-----------------------------------------Darkmode -----------------------------------------------------------*/\n\n\n  var lightTheme = {\n    body: \"#F7F8FA\",\n    color: \"#808080\"\n  };\n  var darkTheme = {\n    body: \"#15202b\",\n    color: \"#FFF\"\n  };\n  var GlobalStyles = createGlobalStyle(_templateObject(), function (props) {\n    return props.theme.body;\n  });\n\n  var toggleTheme = function toggleTheme() {\n    theme === 'light' ? setTheme('dark') : setTheme('light');\n  }; // toggleTheme \n\n  /*-------------------X---------------------Darkmode -----------------------------X------------------------------*/\n\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList: episodeList,\n      currentEpisodeIndex: currentEpisodeIndex,\n      play: play,\n      isPlaying: isPlaying,\n      togglePlay: togglePlay,\n      setIsPlayingState: setIsPlayingState,\n      playNext: playNext,\n      playPrevious: playPrevious,\n      playList: playList,\n      hasPrevious: hasPrevious,\n      hasNext: hasNext,\n      toggleLoop: toggleLoop,\n      isLooping: isLooping,\n      isShuffling: isShuffling,\n      toggleShuffle: toggleShuffle,\n      clearPlayerState: clearPlayerState,\n      toggleTheme: toggleTheme,\n      theme: theme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 7\n  }, this);\n}\n\n_s(PlayerContextProvider, \"mzoqD66JNASMEJmII9l/5HXEjXw=\");\n\n_c = PlayerContextProvider;\nexport var usePlayer = function usePlayer() {\n  _s2();\n\n  return useContext(PlayerContext);\n};\n\n_s2(usePlayer, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayerContextProvider\");","map":{"version":3,"sources":["/home/giovane/Documentos/nlw5/www/podcastrnext/src/contexts/PlayerContext.tsx"],"names":["createContext","useContext","useState","createGlobalStyle","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeIndex","isPlaying","setIsPlaying","isLooping","setIsLooping","isShuffling","setIsShuffling","theme","setTheme","play","episode","playList","list","index","togglePlay","setIsPlayingState","state","hasPrevious","hasNext","length","playNext","nextRandomEpisodeIndex","Math","floor","random","playPrevious","toggleLoop","toggleShuffle","clearPlayerState","lightTheme","body","color","darkTheme","GlobalStyles","props","toggleTheme","usePlayer"],"mappings":"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","sourcesContent":["import {  createContext, ReactNode, useContext, useState } from \"react\";\nimport {createGlobalStyle} from 'styled-components';\n\ntype Episode = {\n    title: string;\n    members: string;\n    thumbnail: string;\n    duration: number;\n    url: string;\n}\n\ntype PlayerContextData = {\n    episodeList: Episode[];\n    currentEpisodeIndex: number;\n    isPlaying: boolean;\n    play:(episode:Episode) => void;\n    togglePlay:() => void;\n    setIsPlayingState:(state) => void;\n    playList:(list: Episode[], index: number) =>void;\n    playNext:()=> void;\n    playPrevious:() => void;\n    toggleLoop:() => void;\n    toggleShuffle:() => void;\n    clearPlayerState:() => void;   \n    isLooping: boolean;\n    isShuffling: boolean;\n    hasPrevious: boolean;\n    hasNext: boolean;\n\n\n    toggleTheme:() => void;\n    theme: string;\n\n}\n\nexport const PlayerContext = createContext({} as PlayerContextData);\n\n\n\ntype PlayerContextProviderProps = { \n  children: ReactNode;\n}\n\n\nexport function PlayerContextProvider({children}: PlayerContextProviderProps){\n    const [episodeList, setEpisodeList] = useState([]);\n    const [currentEpisodeIndex, setCurrentEpisodeIndex] = useState(0);\n    const [isPlaying, setIsPlaying] = useState(false);\n    const [isLooping, setIsLooping] = useState(false);\n    const [isShuffling, setIsShuffling] = useState(false);\n\n    //Darkmode\n    const [theme,setTheme] = useState('light');\n\n\n\n\n    /*------------------------------------------------Play the episode ----------------------------------*/\n  \n    function play(episode){\n      setEpisodeList([episode])\n      setCurrentEpisodeIndex(0)\n      setIsPlaying(true);\n    }\n\n    function playList(list: Episode[], index: number){\n      setEpisodeList(list)\n      setCurrentEpisodeIndex(index)\n      setIsPlaying(true);\n    }\n  \n    function togglePlay(){\n      setIsPlaying(!isPlaying); \n    }\n    function setIsPlayingState(state: boolean){\n      setIsPlaying(state)\n    }\n    /*--------------------X----------------------------Play the episode ----------------X------------------*/\n    /*------------------------------------------------Next and ant episode ----------------------------------*/\n    const hasPrevious = currentEpisodeIndex > 0;\n    const hasNext = isShuffling || (currentEpisodeIndex +1 ) < episodeList.length\n\n    function playNext(){\n      if(isShuffling){\n        const nextRandomEpisodeIndex = Math.floor( Math.random() * episodeList.length );\n\n        setCurrentEpisodeIndex(nextRandomEpisodeIndex)\n\n      }else if(hasNext){\n        setCurrentEpisodeIndex(currentEpisodeIndex + 1)\n      }\n\n\n    }\n    function playPrevious(){\n      { hasPrevious  && (\n        setCurrentEpisodeIndex(currentEpisodeIndex + 1)\n      )}\n\n    }\n\n    /*---------------------X---------------------------Next and ant episode ---------------X-------------------*/\n    /*------------------------------------------------Loop the episode ----------------------------------*/\n      function toggleLoop(){\n        setIsLooping(!isLooping); \n      }\n    /*-------------------------X-----------------------Loop the episode -----------------X-----------------*/\n     /*------------------------------------------------Shoffle the episodes ----------------------------------*/\n     function toggleShuffle(){\n      setIsShuffling(!isShuffling); \n    }\n\n    function clearPlayerState(){\n      setEpisodeList([]);\n      setCurrentEpisodeIndex(0);\n\n    }\n    /*-------------------------X-----------------------Shoffle the episodes -----------------X-----------------*/\n  /*-----------------------------------------Darkmode -----------------------------------------------------------*/\n\n\nconst lightTheme = {\n  body: \"#F7F8FA\",\n  color: \"#808080\"\n}\n\nconst darkTheme = {\n  body: \"#15202b\",\n  color: \"#FFF\"\n}\n\nconst GlobalStyles = createGlobalStyle `\n  body{\n      background-color: ${props => props.theme.body}\n  }\n`\n\n  const toggleTheme =() =>{\n    theme === 'light' ? setTheme('dark') : setTheme('light');\n }\n    \n // toggleTheme \n  /*-------------------X---------------------Darkmode -----------------------------X------------------------------*/\n\n\n    return (\n      <PlayerContext.Provider value={\n            {episodeList,\n            currentEpisodeIndex,\n            play,\n            isPlaying,\n            togglePlay,\n            setIsPlayingState,\n            playNext,\n            playPrevious,\n            playList, \n            hasPrevious,\n            hasNext,\n            toggleLoop,\n            isLooping,\n            isShuffling,\n            toggleShuffle,\n            clearPlayerState,\n\n            toggleTheme,\n            theme\n            }\n        }>\n          {children}\n      </PlayerContext.Provider>\n\n    )\n  \n}\nexport const usePlayer = () => {\n  return useContext(PlayerContext)\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}